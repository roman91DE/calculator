#!/usr/bin/env python3

import unittest
from sympy import sympify
from calc import calculateExpressionString



class TestCalc(unittest.TestCase):

    CASES = [
    "1 + 1",
    "2 - 1",
    "2 * 2",
    "4 / 2",
    "2 ^ 2",
    "1 + 1 + 1",
    "2 - 1 - 1",
    "2 * 2 * 2",
    "4 / 2 / 2",
    "2 ^ 2 ^ 2",
    "1 + 1 * 2",
    "2 - 1 * 2",
    "2 * 2 + 2",
    "4 / 2 + 2",
    "2 ^ 2 + 2",
    "1 + 1 * 2 ^ 2",
    "2 - 1 * 2 ^ 2",
    "2 * 2 + 2 ^ 2",
    "4 / 2 + 2 ^ 2",
    "2 ^ 2 + 2 * 2",
    "1 + 1 * 2 ^ 2 - 2",
    "2 - 1 * 2 ^ 2 + 2",
    "2 * 2 + 2 ^ 2 / 2",
    "4 / 2 + 2 ^ 2 * 2",
    "2 ^ 2 + 2 * 2 - 2",
    "1 + 1 * 2 ^ 2 - 2 / 2",
    "2 - 1 * 2 ^ 2 + 2 / 2",
    "2 * 2 + 2 ^ 2 / 2 * 2",
    "4 / 2 + 2 ^ 2 * 2 / 2",
    "2 ^ 2 + 2 * 2 - 2 / 2",
    "1 + 1 * 2 ^ 2 - 2 / 2 + 2",
    "2 - 1 * 2 ^ 2 + 2 / 2 - 2",
    "2 * 2 + 2 ^ 2 / 2 * 2 + 2",
    "1 + 1 * 2 ^ 2 - 2 / 2 + 2 * 2 ^ 2",
    "2 - 1 * 2 ^ 2 + 2 / 2 - 2 * 2 ^ 2",
    "2 * 2 + 2 ^ 2 / 2 * 2 + 2 * 2 ^ 2",
    "4 / 2 + 2 ^ 2 * 2 / 2 + 2 * 2 ^ 2",
    "2 ^ 2 + 2 * 2 - 2 / 2 + 2 * 2 ^ 2",
    "1 + 1 * 2 ^ 2 - 2 / 2 + 2 * 2 ^ 2 - 2",
    "(1 + 1) * 2",
    "2 - (1 * 2)",
    "4 / (2 + 2)",
    "2 ^ (2 + 2)",
    "1 + (1 * 2) ^ 2",
    "2 - (1 * 2) ^ 2",
    "2 * (2 + 2) ^ 2",
    "1.0 + 1.0",
    "2.0 - 1.0",
    "2.0 * 2.0",
    "4.0 / 2.0",
    "2.0 ^ 2.0",
    "1.0 + 1.0 + 1.0",
    "2.0 - 1.0 - 1.0",
    "2.0 * 2.0 * 2.0",
    "4.0 / 2.0 / 2.0",
    "2.0 ^ 2.0 ^ 2.0",
    "1.0 + 1.0 * 2.0",
    "2.0 - 1.0 * 2.0",
    "2.0 * 2.0 + 2.0",
    "4.0 / 2.0 + 2.0",
    "2.0 ^ 2.0 + 2.0",
    "1 + 1.0 * 2 ^ 2",
    "2 - 1.0 * 2 ^ 2",
    "2.0 * 2 + 2 ^ 2",
    "4 / 2.0 + 2 ^ 2",
    "2 ^ 2 + 2.0 * 2",
    "1 + 1.0 * 2 ^ 2 - 2",
    "2 - 1.0 * 2 ^ 2 + 2",
    "2.0 * 2 + 2 ^ 2 / 2",
    "4 / 2.0 + 2 ^ 2 * 2",
    "2 ^ 2 + 2.0 * 2 - 2",
    "1 + 1.0 * 2 ^ 2 - 2 / 2",
    "2 - 1.0 * 2 ^ 2 + 2 / 2",
    "2.0 * 2 + 2 ^ 2 / 2 * 2",
    "4 / 2.0 + 2 ^ 2 * 2 / 2",
    "2 ^ 2 + 2.0 * 2 - 2 / 2",
    "1 + 1.0 * 2 ^ 2 - 2 / 2 + 2",
    "2 - 1.0 * 2 ^ 2 + 2 / 2 - 2",
    "2.0 * 2 + 2 ^ 2 / 2 * 2 + 2",
    "1 + 1.0 * 2 ^ 2 - 2 / 2 + 2 * 2 ^ 2",
    "2 - 1.0 * 2 ^ 2 + 2 / 2 - 2 * 2 ^ 2",
    ]

    def test_calculateExpressionString(self):
        for case in self.CASES:
            try:
                self.assertEqual(
                    calculateExpressionString(case),
                    float(sympify(case))
                )
            except Exception as e:
                self.fail(f"Exception thrown on case: {case} with error: {e}")


if __name__ == '__main__':
    unittest.main()